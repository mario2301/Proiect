# -*- mode: ruby -*-
# vi: set ft=ruby :

# ssh-keygen -t rsa -b 4096 -C "jenkins"

$os_packages_update = <<SCRIPT
echo "Update OS packages"
apt update && apt upgrade -y
SCRIPT

$docker_install = <<SCRIPT
#!/bin/bash
    echo "Docker install..."
    apt install docker.io -y
SCRIPT

$jenkins_skip_setup = <<SCRIPT
#!/bin/bash
echo "-----Skipping the initial setup------"
sudo cp -f /vagrant/jenkins.service /lib/systemd/system/jenkins.service
sudo cp -f /vagrant/config.xml /var/lib/jenkins/config.xml
sudo systemctl daemon-reload
sudo systemctl enable jenkins.service
sudo systemctl start jenkins.service

sleep 1m

SCRIPT

$jenkins_setup_deb_package = <<SCRIPT
#!/bin/bash
echo "------I am installing Jenkins dependencies------"
sudo apt-get install fontconfig openjdk-11-jre -y
curl -fsSL https://pkg.jenkins.io/debian/jenkins.io.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
echo "---I am installing Jenkins-----"
sudo apt-get update -y
sudo apt-get install jenkins -y
SCRIPT

$jenkins_install_plugins = <<SCRIPT
#!/bin/bash
echo "---------Installing the plugins------------"
sudo chmod +x /vagrant/plugins.sh
sudo bash /vagrant/plugins.sh
sudo systemctl daemon-reload
sudo service jenkins restart

sleep 1m

SCRIPT

$user_setup_CICD = <<SCRIPT
#!/bin/bash
function create_user {
  USER_EXISTS=0
  USERS=`getent passwd | cut -d":" -f1`
  
  for USER in $USERS;
  do
    if [[ $1 == $USER ]]; then
      echo "$1 user exists"
      USER_EXISTS=1
    fi
  done

  if [[ $USER_EXISTS -eq 0 ]]; then
    echo "Creating user: $1"
    adduser --disabled-password --gecos "" $1
  fi
}

function set_authorized_keys {
  if [[ ! -d /var/lib/$1/.ssh ]]; then
    echo "Creating .ssh folder for $1 ssh access"
    mkdir /var/lib/$1/.ssh
  fi
  
  if [[ ! -f /vagrant/files/jenkins_keys/id_rsa.pub ]]; then
    echo "Make sure the vagrant folder is mounted and the file jenkins_keys exists!"
    exit 1
  fi
 
  #cat /vagrant/files/jenkins_keys/id_rsa.pub > /var/lib/$1/.ssh/authorized_keys
  cp /vagrant/files/jenkins_keys/id_rsa.pub /var/lib/$1/.ssh/authorized_keys

  chown -R $1:$1 /var/lib/$1/.ssh
  chmod 600 /var/lib/$1/.ssh/authorized_keys
}

function set_ssh_keys {
  if [[ ! -d /var/lib/$1/.ssh ]]; then
    echo "Creating .ssh folder for $1 ssh access"
    mkdir /var/lib/$1/.ssh
  fi
  
  if [[ ! -f /vagrant/files/jenkins_keys/id_rsa.pub ]]; then
    echo "Make sure the vagrant folder is mounted and the file jenkins.pub exists!"
    exit 1
  fi

  # cat /vagrant/files/jenkins_keys/id_rsa.pub > /var/lib/$1/.ssh/id_rsa.pub
  cp /vagrant/files/jenkins_keys/id_rsa.pub /var/lib/$1/.ssh/id_rsa.pub

  if [[ ! -f /vagrant/files/jenkins_keys/id_rsa ]]; then
    echo "Make sure the vagrant folder is mounted and the file jenkins exists!"
    exit 1
  fi

  # cat /vagrant/files/jenkins_keys/id_rsa > /var/lib/$1/.ssh/id_rsa
  cp /vagrant/files/jenkins_keys/id_rsa /var/lib/$1/.ssh/id_rsa

  chown -R $1:$1 /var/lib/$1/.ssh
  chmod 600 /var/lib/$1/.ssh/id_rsa
  chmod 600 /var/lib/$1/.ssh/id_rsa.pub
}

create_user "jenkins"
usermod -aG docker jenkins

if [ `hostname` == "Environment" ]; then
  set_authorized_keys "jenkins"
else
  set_ssh_keys "jenkins"
fi

SCRIPT

$user_setup_Environment = <<SCRIPT
#!/bin/bash
function create_user {
  USER_EXISTS=0
  USERS=`getent passwd | cut -d":" -f1`
  
  for USER in $USERS;
  do
    if [[ $1 == $USER ]]; then
      echo "$1 user exists"
      USER_EXISTS=1
    fi
  done

  if [[ $USER_EXISTS -eq 0 ]]; then
    echo "Creating user: $1"
    adduser --disabled-password --gecos "" $1
  fi
}

function set_authorized_keys {
  if [[ ! -d /var/lib/$1/.ssh ]]; then
    echo "Creating .ssh folder for $1 ssh access"
    mkdir /home/$1/.ssh
  fi
  
  if [[ ! -f /vagrant/files/jenkins_keys/id_rsa.pub ]]; then
    echo "Make sure the vagrant folder is mounted and the file jenkins_keys exists!"
    exit 1
  fi
 
  #cat /vagrant/files/jenkins_keys/id_rsa.pub > /var/lib/$1/.ssh/authorized_keys
  cp /vagrant/files/jenkins_keys/id_rsa.pub /home/$1/.ssh/authorized_keys

  chown -R $1:$1 /home/$1/.ssh
  chmod 600 /home/$1/.ssh/authorized_keys
}

function set_ssh_keys {
  if [[ ! -d /home/$1/.ssh ]]; then
    echo "Creating .ssh folder for $1 ssh access"
    mkdir /home/$1/.ssh
  fi
  
  if [[ ! -f /vagrant/files/jenkins_keys/id_rsa.pub ]]; then
    echo "Make sure the vagrant folder is mounted and the file jenkins.pub exists!"
    exit 1
  fi

  # cat /vagrant/files/jenkins_keys/id_rsa.pub > /home/$1/.ssh/id_rsa.pub
  cp /vagrant/files/jenkins_keys/id_rsa.pub /home/$1/.ssh/id_rsa.pub

  if [[ ! -f /vagrant/files/jenkins_keys/id_rsa ]]; then
    echo "Make sure the vagrant folder is mounted and the file jenkins exists!"
    exit 1
  fi

  # cat /vagrant/files/jenkins_keys/id_rsa > /home/$1/.ssh/id_rsa
  cp /vagrant/files/jenkins_keys/id_rsa /home/$1/.ssh/id_rsa

  chown -R $1:$1 /home/$1/.ssh
  chmod 600 /home/$1/.ssh/id_rsa
  chmod 600 /home/$1/.ssh/id_rsa.pub
}

create_user "jenkins"
usermod -aG docker jenkins

if [ `hostname` == "Environment" ]; then
  set_authorized_keys "jenkins"
else
  set_ssh_keys "jenkins"
fi

SCRIPT

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"

  config.vm.define "CICD" do |j|
    j.vm.hostname = "CICD"
    j.vm.network "private_network", ip: "192.168.56.10"
    j.vm.provision "shell", :inline => $os_packages_update
    j.vm.provision "shell", :inline => $docker_install
    j.vm.provision "shell", :inline => $jenkins_setup_deb_package
    j.vm.provision "shell", :inline => $jenkins_skip_setup
    j.vm.provision "shell", :inline => $user_setup_CICD
    j.vm.provision "shell", :inline => $jenkins_install_plugins
    j.vm.provider "virtualbox" do |vb|
      vb.cpus = "2"
      vb.memory = "4096"
    end
  end
  config.vm.define "Environment" do |e|
    e.vm.hostname = "Environment"
    e.vm.network "private_network", ip: "192.168.56.11"
    e.vm.provision "shell", :inline => $os_packages_update
    e.vm.provision "shell", :inline => $docker_install
    e.vm.provision "shell", :inline => $user_setup_Environment
    e.vm.provider "virtualbox" do |vb|
      vb.cpus = "1"
      vb.memory = "2048"
    end 
  end
  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end